.. ScatterBrain documentation master file, created by
   sphinx-quickstart on [Date].
   You can adapt this file completely to your liking, but it should at least
   contain the root `toctree` directive.

Welcome to ScatterBrain's documentation!
========================================

.. image:: _static/scatterbrain_logo_placeholder.png
   :alt: ScatterBrain Logo
   :align: center
   :width: 200px

*(This is a placeholder for a project logo. Create an image in `docs/source/_static/`)*

`ScatterBrain` is a Python library designed for the analysis and modeling of Small-Angle X-ray Scattering (SAXS) and Wide-Angle X-ray Scattering (WAXS) data.
This documentation provides guides, tutorials, and the API reference for the library.

.. note::
   This project is under active development (Pre-Alpha). Features and API are subject to change.

.. toctree::
   :maxdepth: 2
   :caption: Getting Started:

   introduction
   installation
   quickstart

.. toctree::
   :maxdepth: 2
   :caption: User Guide & Tutorials:

   user_guide/index
   notebooks_gallery
   # Add more specific tutorial links here as they are created

.. toctree::
   :maxdepth: 2
   :caption: API Reference:

   api/index
   # Individual module pages will be linked from api/index.rst

.. toctree::
   :maxdepth: 1
   :caption: Development:

   contributing
   changelog

.. toctree::
   :maxdepth: 1
   :caption: About:

   license_info

Indices and tables
==================

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`

---

Placeholder content for the main `index.rst`. Additional `.rst` (or `.md`) files referenced here (like `introduction.rst`, `installation.rst`, etc.) will need to be created.

We'll also need to create placeholder files for these toctree entries later, or `sphinx-build` will complain. For now, this structure is a good start.

The `Makefile` for Sphinx is typically generated by `sphinx-quickstart`. We can create a simple one or assume it will be generated. For now, I'll omit it, as `sphinx-build -b html source build` can be run directly.

We also need to create the initial package directory structure.

---
**Directory:** `ScatterBrain/scatterbrain/`
---
*(This directory itself needs to be created)*

---
**File:** `ScatterBrain/scatterbrain/__init__.py`
---
```python
# ScatterBrain: A Python library for SAXS/WAXS data analysis and modeling.

"""
ScatterBrain
============

A Python library designed to facilitate the loading, processing, analysis,
modeling, and visualization of Small-Angle X-ray Scattering (SAXS)
and Wide-Angle X-ray Scattering (WAXS) data.

Modules
-------
core
    Core data structures like ScatteringCurve1D.
io
    Functions for data input and output.
processing
    Functions for 1D data processing (e.g., background subtraction).
analysis
    Modules for SAXS/WAXS analysis methods (e.g., Guinier, Porod).
modeling
    Tools for fitting scattering models to data.
visualization
    Plotting utilities.
utils
    General utility functions and constants.

Documentation is available at [Link to your documentation]
"""

# Version of the scatterbrain package
# This can be read by setup.py or pyproject.toml to determine package version
# Or, more commonly, the version is defined in pyproject.toml and read here
# using importlib.metadata (Python 3.8+)

try:
    from importlib.metadata import version, PackageNotFoundError
    try:
        __version__ = version("scatterbrain")
    except PackageNotFoundError:
        # package is not installed, e.g. when running from source checkout
        __version__ = "0.0.1.dev0" # Or a more dynamic way to get it if possible
except ImportError:
    # For Python < 3.8, a fallback or a different mechanism might be needed
    # if not using setuptools_scm or similar.
    # For simplicity during initial setup, we can hardcode a dev version.
    __version__ = "0.0.1.dev0" # Fallback for < py3.8 or if metadata fails

# Import key components to be available at the top level, e.g.:
# from .core import ScatteringCurve1D
# from .io import load_ascii_1d

# Or, encourage users to import from submodules:
# import scatterbrain.core
# import scatterbrain.io
# etc.
# This is often cleaner for larger libraries.

# Define __all__ for `from scatterbrain import *` if desired, though explicit imports are preferred.
# __all__ = ['core', 'io', 'analysis', 'modeling', 'processing', 'visualization', 'utils', '__version__']

print(f"ScatterBrain v{__version__} - Initializing...") # Optional: for early dev feedback